#!/usr/bin/env bash
# docker_xdebug - attach to a running container and debug a file or test
#
# This script was built to be integrated into phpstorm. When done, you will be able to start/debug unit tests, codeception tests with a click from within phpstorm.
function usage
{
    echo "usage: bash docker_xdebug [options]
Options:
    --container=         The docker container that should be use for execution. [required when -p|--project-name is absent]
    --codeception        Run codeception tests.
    --debug              Enable debugging with xdebug.
    --file=              File to debug relative to project root.
    --idekey=            Your xdebug idekey. [default: xdebug]
    --method=            Method to debug. Works only in combination with -f|--file.
    --php                Debug php files. [default]
    --phpunit            Debug php unit tests.
    --project-name=      The name of the project directory. This is used to automatically determine the docker container. [required when -c|--container is absent]
    --server=            PHPStorm configuration (Languages & Framework -> PHP -> Servers) [default: local]

    --help               Print the this help page.
    "
}

function xdebugSettings(){
    if [ "$debug" = "true" ]; then
        # now we can determine the gateway ip to communicate with the host
        docker_net_gateway=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.Gateway}}/{{end}}' "$docker_container" | awk -F/ '{print $1}')
        xdebug_settings="-dxdebug.remote_autostart=1 -dxdebug.remote_host=${docker_net_gateway}"
    fi
}

idekey="xdebug"
project=
serverName="local"
executable="/usr/bin/php"
xdebug_settings=
debug="false"

while [ "$1" != "" ]; do
    key=$(echo $1 | cut -d "=" -f1)
    value=$(echo $1 | awk -F\= '{print $NF}')

    case $key in
        --server )          serverName="$value"
                            ;;
        --container )       docker_container="$value"
                            ;;
        --file )            file="$value"
                            ;;
        --method )          method="$value"
                            ;;
        --idekey )          idekey="$value"
                            ;;
        --project-name )    project="$value"
                            ;;
        --codeception )     executable="vendor/bin/codecept run"
                            ;;
        --phpunit )         executable="vendor/bin/phpunit"
                            ;;
        --php )             executable="$executable"
                            ;;
        --debug )           debug="true"
                            ;;
        -h | --help )       usage
                            exit
                            ;;
        * )                 usage
                            exit 1
    esac
    shift
done

# determine the docker container running php (get the last chunk of a string that is separated by a dot)
if [ -z "$docker_container" ] && [ ! -z "$project" ]; then
    docker_container=`echo $(echo "$project" | awk -F. '{print $NF}')-php`
fi

# generate xdebug settings string
xdebugSettings

# Add a trailing slash if it is a directory
fileOrDir=$(echo "$file" | awk -F/ '{print $NF}')
if [ $(tr -dc "." <<< "$fileOrDir" | wc -c) = 0 ];then
    file="$file/"
fi

command="$executable $file"

# if there is a method, we need to build the command depending on the executable
if [ ! -z "$method" ]; then
    if [[ "$executable" =~ "phpunit" ]]; then
        command="$executable --filter $method $file"
    else
        command="$executable $file:$method"
    fi
fi

docker exec "$docker_container" \
    bash -c "XDEBUG_CONFIG='idekey=$idekey' \
             PHP_IDE_CONFIG='serverName=$serverName' \
             php $xdebug_settings ${command}"